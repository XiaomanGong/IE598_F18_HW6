from sklearn import datasets
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold


iris=datasets.load_iris()
X=iris.data[:,2:3]
y=iris.target

in_sample_scores=[]
out_sample_scores=[]

for i in range(1,11):
    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=i, stratify=y)
    dt = DecisionTreeClassifier(criterion='gini', 
                              max_depth=4, 
                              random_state=1)
    dt.fit(X_train,y_train)
    y_pred_in=dt.predict(X_train)
    y_pred_out=dt.predict(X_test)
    score_in=metrics.accuracy_score(y_train,y_pred_in)
    score_out=metrics.accuracy_score(y_test,y_pred_out)
    in_sample_scores.append(score_in)
    out_sample_scores.append(score_out)
    print("For random state :",i,",in-sample score =",("%.4f"%score_in),
          ", out-of-sample score =", ("%.4f"%score_out))

print("in-sample set : mean=", np.mean(in_sample_scores),", std=",np.std(in_sample_scores),'\n')
print("out-of-sample set : mean=", np.mean(out_sample_scores),
      ", std=",np.std(out_sample_scores),'\n')

# X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=1)
kfold=KFold(n_splits=10,random_state=1).split(X_train,y_train)


dt.fit(X_train,y_train)
cv_score=cross_val_score(estimator=dt,X=X_train,y=y_train,cv=10,n_jobs=1)

np.transpose(cv_score)

print("CV accuracy scores:", cv_score,'\n')
print("CV mean:",np.mean(cv_score),", std:", np.std(cv_score),'\n')
    

print("My name is Xiaoman Gong")
print("My NetID is: xiaoman5")
print("I hereby certify that I have read the University policy on Academic Integrity and that I am not in violation.")
######STOP HERE######################
